{"version":3,"file":"dataset.js","sources":["../src/utils.js","../src/waves.js","../src/swissroll.js","../src/sshape.js","../src/rays.js","../src/moons.js","../src/blobs.js","../src/penguins.js","../src/openml.js","../src/mnist.js","../src/fmnist.js","../src/kmnist.js"],"sourcesContent":["export const TAU = Math.PI * 2;\n\nexport function scaleLinear([min, max], [from, to]) {\n    const domain_span = max - min;\n    const range_span = to - from;\n    return (value) => (value - min) / domain_span * range_span + from;\n}\n\nexport function extent(array, acc = d => d) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (const entry of array) {\n        min = Math.min(acc(entry), min);\n        max = Math.max(acc(entry), max);\n    }\n    return [min, max];\n}\n\nexport function deviation(array, acc = d => d) {\n    const N = array.length;\n    let mean = 0;\n    for (const entry of array) {\n        mean += acc(entry);\n    }\n    mean /= N;\n    let dev = 0;\n    for (const entry of array) {\n        dev += (acc(entry) - mean);\n    }\n    return [mean, dev / N];\n}\n\nexport function getStatistics({values, columns}) {\n    return function() {\n        let result = {};\n        columns.forEach((dimension, i) => {\n            result[dimension] = {};\n            const [mean, std] = deviation(values, row => row[i]);\n            result[dimension].std = std;\n            result[dimension].mean = mean;\n            const [min, max] = extent(values, row => row[i]);\n            result[dimension].min = min;\n            result[dimension].max = max;\n        })\n        return result;\n    }\n}\n\nexport async function get_fetch() {\n    let fetch;\n    try {\n        if (process && typeof process !== undefined && process.release.name === \"node\") {\n            fetch = (await import(\"cross-fetch\")).fetch;\n        }\n    } catch {\n        fetch = window.fetch;\n    }\n    return fetch;\n}\n\nexport function parse_openml_mnist_data(raw_data, fn_apply_to_value = (v) => v) {\n    const [all_columns, ...values_tmp] = raw_data.split(/\\r?\\n|\\r/).map(row => row.split(\",\"));\n    const all_labels = [];\n    const all_values = [];\n    values_tmp.forEach((row) => {\n        all_values.push(row.slice(0, -1).map(fn_apply_to_value));\n        all_labels.push(row.slice(-1)[0]);\n    });\n    return { all_columns, all_values, all_labels };\n}","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics } from \"./utils.js\";\n\n/**\n * Creates a uniform grid in 2d and adds a third dimensions by sin(x * {@link freq_x}) * cos(y * {@link freq_y}) * {@link amplitude}.\n * @param {Object} parameters \n * @param {Number} [parameters.N = 400] - Number of points.\n * @param {Float} [parameters.freq_x = 1] - Multiplicator for sin in the x-direction.\n * @param {Float} [parameters.freq_y = 1] - Multiplicator for cos in the y-direction.\n * @param {Float} [parameters.amplitude = 2] - Amplitutde for z-direction.\n * @param {Float} [parameters.noise = 0] - Add uniform noise to each point at each direction.\n * @param {Number} [parameters.seed = 4711] - Seed for the random number generator.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final waves dataset.\n */\nexport default function waves({N = 400, freq_x = 1, freq_y = 1, amplitude = 2, noise = 0, seed = 4711} = {}) {\n    const R = new Randomizer(seed);\n    const a = Math.ceil(Math.sqrt(N));\n    let values = [];\n    const labels = [];\n    const columns = [\"axis_1\", \"axis_2\", \"axis_3\"];\n    for (let i = 0; i < N; ++i) {\n        let y = i % a / a - .5;\n        let x = Math.floor(i / a) / a - .5;\n        let z = Math.sin(x * freq_x) * Math.cos(y * freq_y) * amplitude\n        values.push([x, y, z]);\n        labels.push(Math.floor(i / N * 8));\n    }\n    if (noise > 0) {\n        values = values.map((row) => {\n            return row.map(value => value + R.random * noise);\n        })\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, columns})};\n}\n\nexport const WAVES = waves();","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics, TAU } from \"./utils.js\";\n\n/**\n * Creates a swissroll.\n * @param {Object} parameters \n * @param {Number} parameters.N - Number of points.\n * @param {Float} parameters.alpha_start - Angle from which the swissroll starts.\n * @param {Float} parameters.alpha_end - Angle at which the swissroll ends.\n * @param {Float} parameters.noise - Add uniform noise to each point at each direction.\n * @param {Float} parameters.width - Width of the swissroll.\n * @param {Number} parameters.seed - Seed for the random number generator.\n * @param {Number} parameters.num_labels - Number of labels for the swissroll, partitions the swissroll in num_labels parts according to the angle.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final swissroll dataset.\n */\nexport default function swissroll({N = 400, alpha_start = 1, alpha_end = 2.5, noise = 0, width = 20, seed = 4711, num_labels = 8} = {}) {\n    const R = new Randomizer(seed);\n    let values = new Array(N);\n    const labels = new Array(N);\n    const columns = [\"X\", \"Y\", \"Z\"];\n    for (let i = 0; i < N; ++i) {\n        const alpha = (alpha_start + (i / N * (alpha_end - alpha_start))) * TAU;\n        const x = alpha * Math.cos(alpha);\n        const y = alpha * Math.sin(alpha);\n        const z = width * R.random - width / 2;\n        values[i] = [x, y, z];\n        labels[i] = Math.floor(i / Math.floor(N / num_labels));\n    }\n    if (noise > 0) {\n        values = values.map((row) => {\n            return row.map(value => value + R.random * noise);\n        })\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, columns})};\n}\n\nexport const SWISSROLL = swissroll();","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics } from \"./utils.js\";\n\n/**\n * Creates a s-shape.\n * @param {Object} parameters \n * @param {Number} parameters.N - Number of points.\n * @param {Float} parameters.noise - Add uniform noise to each point at each direction.\n * @param {Float} parameters.width - Width of the s-shape.\n * @param {Number} parameters.seed - Seed for the random number generator.\n * @param {Number} parameters.num_labels - Number of labels for the s-shape, partitions the s-shape in num_labels parts according to the angle.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final s-shape dataset.\n */\nexport default function sshape({N = 400, noise = 0, width = 20, seed = 4711, num_labels = 8} = {}) {\n    const R = new Randomizer(seed);\n    let values = new Array(N);\n    const labels = new Array(N);\n    const columns = [\"X\", \"Y\", \"Z\"];\n    for (let i = 0; i < N; ++i) {\n        const alpha = 3 * Math.PI * (i / N - .5)\n        const x = -Math.sin(alpha);\n        const y = Math.sign(alpha) * (Math.cos(alpha) - 1);\n        const z = width * R.random - width / 2;\n        values[i] = [x, y, z];\n        labels[i] = Math.floor(i / (N / num_labels));\n    }\n    if (noise > 0) {\n        values = values.map((row) => {\n            return row.map(value => value + R.random * noise);\n        })\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, columns})};\n}\n\nexport const SSHAPE = sshape();","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics } from \"./utils.js\";\n\n/**\n * Creates a rays dataset consisting of {@link parameters.D} rays.\n * @param {Object} parameters \n * @param {Number} [parameters.N = 400] - Roughly the number of points, uses round(N / D) * D.\n * @param {Number} [parameters.D = 7] - Number of rays, and number of the results dimensionality. Creates a ray per direction.\n * @param {Float} [parameters.noise = 0] - Add uniform noise to each point at each direction.\n * @param {Boolean} [parameters.touching = false] - Defines if the rays touches each other at the origin.\n * @param {Float} [paramter.length = 12] - Length of each ray.\n * @param {Number} [parameters.seed = 4711] - Seed for the random number generator.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final rays dataset.\n */\nexport default function rays({N = 400, D = 7, noise = 0, touching = true, length = 12, seed = 4711} = {}) {\n    const R = new Randomizer(seed);\n    const n = Math.round(N / D) * D;\n    let values = [];\n    const labels = [];\n    const columns = Array.from({length: D}, (_, i) => `axis_${i + 1}`);\n    for (let i = 0; i < n; ++i) {\n        let row = Array.from({length: D}, (_, j) => (i % D != j) ? 0 : ((i / N) * length - length / 2));\n        if (!touching) {\n            row = row.map((v, j) => v + (j - i % D))\n        }\n        values.push(row);\n        labels.push(`ray_${i % D + 1}`);\n    }\n    if (noise > 0) {\n        values = values.map((row) => {\n            return row.map(value => value + R.random * noise);\n        })\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, columns})};\n}\n\nexport const RAYS = rays();","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { TAU, scaleLinear, getStatistics } from \"./utils.js\";\n\n/**\n * Creates a 'moons' dataset consisting of two intersecting circles.\n * @param {Object} parameters \n * @param {Number} parameters.N - Number of points.\n * @param {Float} parameters.noise - Add uniform noise to each point at each direction.\n * @param {Float} parameters.open - How open the circles should be. Takes a value in [0 and 1), where 0 creates two full circles, 0.5 create two half circles.\n * @param {Number} parameters.seed - Seed for the random number generator.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final moons dataset.\n */\nexport default function moons({N = 400, noise = 0, open=0.5, seed = 4711} = {}) {\n    const R = new Randomizer(seed);\n    const N_alpha = Math.floor(N / 2);\n    const N_beta = N - N_alpha;\n\n    const scale = scaleLinear([0, 1], [open / 2, 1 - open / 2])\n    let values = new Array(N);\n    const labels = new Array(N);\n    const columns = [\"moon_X\", \"moon_Y\", \"moon_Z\"];\n    for (let i = 0; i < N_alpha; ++i) {\n        const alpha = TAU * scale(i / N_alpha) - TAU / 4\n        const x = Math.sin(alpha) - 0.5;\n        const y = Math.cos(alpha);\n        const z = 0\n        values[i] = [x, y, z];\n        labels[i] = \"α\";\n    }\n    for (let i = 0; i < N_beta; ++i) {\n        const alpha = TAU * scale(i / N_beta) - TAU / 4\n        const x = 1 - Math.sin(alpha) - .5;\n        const y = 0\n        const z = 1 - Math.cos(alpha) - 1; \n        values[i + N_alpha] = [x, y, z];\n        labels[i + N_alpha] = \"β\";\n    }\n    if (noise > 0) {\n        values = values.map((row) => {\n            return row.map(value => value + R.random * noise);\n        })\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, columns})};\n}\n\nexport const MOONS = moons();","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics } from \"./utils.js\";\n\n/**\n * Creates a dataset consisting of some gaussian blobs.\n * @param {Object} parameters \n * @param {Number} [parameters.N = 400] - Number of points.\n * @param {Number} [parameters.D = 3] - Dimensionality of the dataset.\n * @param {Array<Array>|Number} [parameters.centers = 3] - Either number of blobs, or their centers.\n * @param {Array<Array>|Number} [parameters.deviations = 1] - If a number given the deviation of the blobs in each dimension, else an array consisting the deviations for all blobs for all directions.\n * @param {Number} [parameters.seed = 4711] - Seed for the random number generator.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final blobs dataset.\n */\nexport default function blobs({N = 400, D = 3, centers, deviations, seed = 4711} = {}) {\n    const R = new Randomizer(seed);\n    const values = [];\n    const labels = [];\n    const columns = Array.from({length: D}, (_, i) => `axis_${i}`);\n\n    if (centers == null) {\n        centers = 3\n    }\n\n    if (Number.isInteger(centers)) {\n        centers = Array.from({length: centers}, () => {\n            return Array.from({length: D}, () => R.random * 12 - 6);\n        })\n    }\n\n    if (!Array.isArray(centers)) {\n        throw \"Centers needs to be an array, an integer, or null (defaults to centers = 3)!\";\n    }\n\n    if (!deviations) {\n        deviations = centers.map(center => center.map(() => 1));\n    } else {\n        if (Number.isFinite(deviations)) {\n            deviations = centers.map(center => center.map(() => deviations));\n        }\n        if (Array.isArray(deviations) && deviations.length != centers.length) {\n            throw \"If deviations is given, then its value needs to be a number or an array of the same length as centers! (defaults to deviations = 1)\";\n        }\n    }\n\n    const number_of_points_per_blob = Math.floor(N / centers.length);\n    const residuum = N - number_of_points_per_blob * centers.length;\n    const ns = Array.from({length: centers.length}, () => number_of_points_per_blob);\n    ns[0] += residuum\n    for (let i = 0; i < centers.length; ++i) {\n        const n = ns[i];\n        let randoms = [];\n        for (let d = 0; d < D; ++d) {\n            randoms.push(randomNormal(R, centers[i][d], deviations[i][d]))\n        }\n        for (let j = 0; j < n; ++j) {\n            values.push(randoms.map(r => r()));\n            labels.push(`blob_${i + 1}`);\n        }\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, columns})};\n}\n\nexport const BLOBS = blobs();\n\n// https://github.com/d3/d3-random/blob/588790e06454c27f7dae4e7cffeadf2c783d88c3/src/normal.js\nfunction randomNormal(R, mu = 0, sigma = 1) {\n    let x;\n    let r;\n    return function() {\n        let y;\n        if (x != null) {\n            y = x;\n            x = null;\n        } else {\n            do {\n                x = R.random * 2 - 1;\n                y = R.random * 2 - 1;\n                r = x * x + y * y;\n            } while (!r || r > 1);\n        }\n        return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    }\n}","import { getStatistics } from \"./utils.js\";\nimport * as PENGUINS_RAW from \"../dataset/penguins.json\";\n\n/**\n * Returns the Palmers Penguins dataset.\n * @param {Object} parameters\n * @param {false|\"all\"|\"values\"} [removeMissingValues = \"all\"] - Remove missing values, if \"all\" then remove all rows if a null is in any column. If \"values\", then remove rows only if only the respective row in values contains a null. If false, then no missing value gets removed.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, sex: Array<String>, year: Array<Number>, island: Array<String>, statistics: Object}} - The final penguins dataset.\n */\nexport default function penguins({removeMissingValues = \"all\"} = {}) {\n    let {values, columns, labels, sex, year, island, statistics} = PENGUINS_RAW;\n    if (removeMissingValues == \"all\" || removeMissingValues == \"values\") {\n        const N = values.length;\n        let valid_indices = [];\n        let result = true;\n\n        for (let i = 0; i < N; ++i) {\n            result = true;\n            if (removeMissingValues == \"all\") {\n                if (!year[i] || !sex[i] || !labels[i] || !island[i]) {\n                    result = result && false;\n                }\n            }\n            if (removeMissingValues == \"all\" || removeMissingValues == \"values\") {\n                for (const value of values[i]) {\n                    result = result && !Number.isNaN(value);\n                }\n            }   \n            if (result == true) valid_indices.push(i);\n        }\n\n        values = filter(values, valid_indices);\n        labels = filter(labels, valid_indices);\n        sex = filter(sex, valid_indices);\n        year = filter(year, valid_indices);\n        island = filter(island, valid_indices);\n    }\n    // rollup removes columns from this function call\n    // const statistics = getStatistics(values, PENGUINS_RAW.columns);\n    return {values, columns, labels, sex, year, island, statistics: getStatistics(values, columns)};\n}\n\nfunction filter(values, indices) {\n    return indices.map(i => values[i]);\n}\n\nexport const PENGUINS = penguins();","import { get_fetch } from \"./utils.js\";\nconst openml_main_api = \"https://www.openml.org/api/v1/json/\";\nconst openml_file_api = \"https://www.openml.org/data/v1/get_csv/\";\n\n// MNIST = 554\n// FMNIST = 40996\n// KNNIST = 41982\n\n/**\n * Fetches data from openml.org\n * @param {Number} id - Data ID from openml.org\n * @param {String} api_key - Your api-key\n * @returns {Object} - Raw data as string, and the dataset description provided by openml.org.\n */\nexport default async function fetch_openml(id, api_key) {\n    let fetch = await get_fetch();\n\n    let url = encodeURI(`${openml_main_api}data/${id}`);\n    if (api_key) {\n        url += `?api_key=${api_key}`;\n    }\n    // Fetching for file id.\n    const main_response = await fetch(url);\n    \n    if (!main_response.ok) {\n        throw Error(`${main_response.status} ${main_response.statusText}`);\n    }\n    const description = await main_response.json();\n\n    // fetching the file.\n    const file_response = await fetch(openml_file_api + description.data_set_description.file_id);\n    if (!file_response.ok) {\n        throw Error(`${file_response.status} ${file_response.statusText}`);\n    }\n    const raw_data = await file_response.text();\n\n\n    return { raw_data, description: {} };\n}","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics, parse_openml_mnist_data } from \"./utils.js\";\nimport { default as fetch_openml } from \"./openml.js\";\n\n/**\n * Downloads and samples the MNIST dataset.\n * @param {Object} parameters\n * @param {Number} [N = 400] - Number of points.\n * @param {Number} [seed = 4711] - Seed for the random number generator.\n * @param {Array<Number>} [digits = [0,1,2,3,4,5,6,7,8,9]] - Filter for which digits end up in the final dataset.\n * @param {String} [api_key = null] - API key for OpenML.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final MNIST dataset sample.\n */\nexport default async function({N = 400, seed = 4711, digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], api_key} = {}) {\n    const R = new Randomizer(seed);\n    const { raw_data, description } = await fetch_openml(554, api_key);\n    const { all_values, all_labels } = parse_openml_mnist_data(raw_data, value => +value / 255);\n\n    const n = Math.floor(N / digits.length);\n    const number_digits = Array.from({length: digits.length}, () => n)\n    number_digits[0] += (N - (n * digits.length));\n    \n    const indices = all_labels.map((_, i) => i);\n    const filtered_indices = digits.map(digit => indices.filter(i => all_labels[i] == digit));\n    const selected_indices = number_digits.map((n, i) => R.choice(filtered_indices[i], n)).flat();\n    const values = [];\n    const labels = [];\n    for (const i of selected_indices) {\n        values.push(all_values[i]);\n        labels.push(all_labels[i]);\n    }\n    const columns = Array.from({length: 28 * 28}, (_, i) => `pixel_at_${i % 28}_${Math.floor(i / 28)}`);\n    return { values, labels, columns, statistics: getStatistics({values, columns}), description };\n}","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics, parse_openml_mnist_data } from \"./utils.js\";\nimport { default as fetch_openml } from \"./openml.js\";\n\nconst FMNIST_LABELS_DICT = {\n    0: \"T-shirt/top\",\n    1: \"Trouser\",\n    2: \"Pullover\",\n    3: \"Dress\",\n    4: \"Coat\",\n    5: \"Sandal\",\n    6: \"Shirt\",\n    7: \"Sneaker\",\n    8: \"Bag\",\n    9: \"Ankle boot\"\n}\n\n/**\n * Downloads and samples the FMNIST dataset.\n * @param {Object} parameters\n * @param {Number} [N = 400] - Number of points.\n * @param {Number} [seed = 4711] - Seed for the random number generator.\n * @param {Array<Number>} [items = [0,1,2,3,4,5,6,7,8,9]] - Filter for which items end up in the final dataset.\n * @param {String} [api_key = null] - API key for OpenML.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final FMNIST dataset sample.\n */\nexport default async function({N = 400, seed = 4711, items = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], api_key} = {}) {\n    const R = new Randomizer(seed);\n    const { raw_data, description } = await fetch_openml(40996, api_key);\n    const { all_values, all_labels } = parse_openml_mnist_data(raw_data, value => +value / 255);\n\n    const n = Math.floor(N / items.length);\n    const number_digits = Array.from({length: items.length}, () => n)\n    number_digits[0] += (N - (n * items.length));\n    \n    const indices = all_labels.map((_, i) => i);\n    const filtered_indices = items.map(digit => indices.filter(i => all_labels[i] == digit));\n    const selected_indices = number_digits.map((n, i) => R.choice(filtered_indices[i], n)).flat();\n    const values = [];\n    const labels = []\n    for (const i of selected_indices) {\n        values.push(all_values[i]);\n        labels.push(FMNIST_LABELS_DICT[all_labels[i]]);\n    }\n    const columns = Array.from({length: 28 * 28}, (_, i) => `pixel_at_${i % 28}_${Math.floor(i / 28)}`);\n    return {values, labels, columns, statistics: getStatistics({values, columns}), description};\n}\n","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics, parse_openml_mnist_data } from \"./utils.js\";\nimport { default as fetch_openml } from \"./openml.js\";\n\nconst KMNIST_LABELS_DICT = {\n    0: \"お\",\n    1: \"き\",\n    2: \"す\",\n    3: \"つ\",\n    4: \"な\",\n    5: \"は\",\n    6: \"ま\",\n    7: \"や\",\n    8: \"れ\",\n    9: \"を\"\n}\n\n/**\n * Downloads and samples the Kuzushiji-MNIST dataset.\n * @param {Object} parameters\n * @param {Number} [N = 400] - Number of points.\n * @param {Number} [seed = 4711] - Seed for the random number generator.\n * @param {Array<Number>} [items = [0,1,2,3,4,5,6,7,8,9]] - Filter for which items end up in the final dataset.\n * @param {String} [api_key = null] - API key for OpenML.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final Kuzushiji-MNIST dataset sample.\n * @see{@link{https://arxiv.org/abs/1812.01718}}\n */\nexport default async function({N = 400, seed = 4711, letters = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], api_key} = {}) {\n    const R = new Randomizer(seed);\n    const { raw_data, description } = await fetch_openml(41982, api_key);\n    const { all_values, all_labels } = parse_openml_mnist_data(raw_data, value => +value / 255);\n\n    const n = Math.floor(N / letters.length);\n    const number_digits = Array.from({length: letters.length}, () => n)\n    number_digits[0] += (N - (n * letters.length));\n    \n    const indices = all_labels.map((_, i) => i);\n    const filtered_indices = letters.map(digit => indices.filter(i => all_labels[i] == digit));\n    const selected_indices = number_digits.map((n, i) => R.choice(filtered_indices[i], n)).flat();\n    const values = [];\n    const labels = []\n    for (const i of selected_indices) {\n        values.push(all_values[i]);\n        labels.push(KMNIST_LABELS_DICT[all_labels[i]]);\n    }\n    const columns = Array.from({length: 28 * 28}, (_, i) => `pixel_at_${i % 28}_${Math.floor(i / 28)}`);\n    return {values, labels, columns, statistics: getStatistics({values, columns}), description};\n}\n"],"names":["Randomizer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;AAC/B;AACO,SAAS,WAAW,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;AACpD,IAAI,MAAM,WAAW,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,IAAI,MAAM,UAAU,GAAG,EAAE,GAAG,IAAI,CAAC;AACjC,IAAI,OAAO,CAAC,KAAK,KAAK,CAAC,KAAK,GAAG,GAAG,IAAI,WAAW,GAAG,UAAU,GAAG,IAAI,CAAC;AACtE,CAAC;AACD;AACO,SAAS,MAAM,CAAC,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE;AAC5C,IAAI,IAAI,GAAG,GAAG,QAAQ,CAAC;AACvB,IAAI,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC;AACxB,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;AAC/B,QAAQ,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACxC,QAAQ,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACxC,KAAK;AACL,IAAI,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACtB,CAAC;AACD;AACO,SAAS,SAAS,CAAC,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE;AAC/C,IAAI,MAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC3B,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC;AACjB,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;AAC/B,QAAQ,IAAI,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;AAC3B,KAAK;AACL,IAAI,IAAI,IAAI,CAAC,CAAC;AACd,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC;AAChB,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;AAC/B,QAAQ,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;AACnC,KAAK;AACL,IAAI,OAAO,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;AAC3B,CAAC;AACD;AACO,SAAS,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE;AACjD,IAAI,OAAO,WAAW;AACtB,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC;AACxB,QAAQ,OAAO,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC,KAAK;AAC1C,YAAY,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;AACnC,YAAY,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,YAAY,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC;AACxC,YAAY,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;AAC1C,YAAY,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,YAAY,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC;AACxC,YAAY,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC;AACxC,SAAS,EAAC;AACV,QAAQ,OAAO,MAAM,CAAC;AACtB,KAAK;AACL,CAAC;AACD;AACO,eAAe,SAAS,GAAG;AAClC,IAAI,IAAI,KAAK,CAAC;AACd,IAAI,IAAI;AACR,QAAQ,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE;AACxF,YAAY,KAAK,GAAG,CAAC,MAAM,mFAAO,aAAa,MAAC,EAAE,KAAK,CAAC;AACxD,SAAS;AACT,KAAK,CAAC,MAAM;AACZ,QAAQ,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AAC7B,KAAK;AACL,IAAI,OAAO,KAAK,CAAC;AACjB,CAAC;AACD;AACO,SAAS,uBAAuB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;AAChF,IAAI,MAAM,CAAC,WAAW,EAAE,GAAG,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/F,IAAI,MAAM,UAAU,GAAG,EAAE,CAAC;AAC1B,IAAI,MAAM,UAAU,GAAG,EAAE,CAAC;AAC1B,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;AAChC,QAAQ,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;AACjE,QAAQ,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;AACnD;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE;AAC7G,IAAI,MAAM,CAAC,GAAG,IAAIA,kBAAU,CAAC,IAAI,CAAC,CAAC;AACnC,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,IAAI,IAAI,MAAM,GAAG,EAAE,CAAC;AACpB,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,MAAM,OAAO,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACnD,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AAChC,QAAQ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AAC/B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AAC3C,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,UAAS;AACvE,QAAQ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/B,QAAQ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3C,KAAK;AACL,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;AACnB,QAAQ,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AACrC,YAAY,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;AAC9D,SAAS,EAAC;AACV,KAAK;AACL;AACA,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACnF,CAAC;AACD;AACY,MAAC,KAAK,GAAG,KAAK;;ACjC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,WAAW,GAAG,CAAC,EAAE,SAAS,GAAG,GAAG,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,EAAE,EAAE,IAAI,GAAG,IAAI,EAAE,UAAU,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;AACxI,IAAI,MAAM,CAAC,GAAG,IAAIA,kBAAU,CAAC,IAAI,CAAC,CAAC;AACnC,IAAI,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9B,IAAI,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;AAChC,IAAI,MAAM,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACpC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AAChC,QAAQ,MAAM,KAAK,GAAG,CAAC,WAAW,IAAI,CAAC,GAAG,CAAC,IAAI,SAAS,GAAG,WAAW,CAAC,CAAC,IAAI,GAAG,CAAC;AAChF,QAAQ,MAAM,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC1C,QAAQ,MAAM,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC1C,QAAQ,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;AAC/C,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC9B,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;AAC/D,KAAK;AACL,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;AACnB,QAAQ,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AACrC,YAAY,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;AAC9D,SAAS,EAAC;AACV,KAAK;AACL;AACA,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACnF,CAAC;AACD;AACY,MAAC,SAAS,GAAG,SAAS;;AClClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,EAAE,EAAE,IAAI,GAAG,IAAI,EAAE,UAAU,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;AACnG,IAAI,MAAM,CAAC,GAAG,IAAIA,kBAAU,CAAC,IAAI,CAAC,CAAC;AACnC,IAAI,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9B,IAAI,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;AAChC,IAAI,MAAM,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACpC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AAChC,QAAQ,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAC;AAChD,QAAQ,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACnC,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC3D,QAAQ,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;AAC/C,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC9B,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;AACrD,KAAK;AACL,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;AACnB,QAAQ,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AACrC,YAAY,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;AAC9D,SAAS,EAAC;AACV,KAAK;AACL;AACA,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACnF,CAAC;AACD;AACY,MAAC,MAAM,GAAG,MAAM;;AChC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,QAAQ,GAAG,IAAI,EAAE,MAAM,GAAG,EAAE,EAAE,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE;AAC1G,IAAI,MAAM,CAAC,GAAG,IAAIA,kBAAU,CAAC,IAAI,CAAC,CAAC;AACnC,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACpC,IAAI,IAAI,MAAM,GAAG,EAAE,CAAC;AACpB,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AAChC,QAAQ,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AACxG,QAAQ,IAAI,CAAC,QAAQ,EAAE;AACvB,YAAY,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAC;AACpD,SAAS;AACT,QAAQ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzB,QAAQ,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,KAAK;AACL,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;AACnB,QAAQ,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AACrC,YAAY,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;AAC9D,SAAS,EAAC;AACV,KAAK;AACL;AACA,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACnF,CAAC;AACD;AACY,MAAC,IAAI,GAAG,IAAI;;AClCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE;AAChF,IAAI,MAAM,CAAC,GAAG,IAAIA,kBAAU,CAAC,IAAI,CAAC,CAAC;AACnC,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACtC,IAAI,MAAM,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC;AAC/B;AACA,IAAI,MAAM,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,EAAC;AAC/D,IAAI,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9B,IAAI,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;AAChC,IAAI,MAAM,OAAO,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACnD,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,EAAE,CAAC,EAAE;AACtC,QAAQ,MAAM,KAAK,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,GAAG,GAAG,EAAC;AACxD,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;AACxC,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAClC,QAAQ,MAAM,CAAC,GAAG,EAAC;AACnB,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC9B,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACxB,KAAK;AACL,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;AACrC,QAAQ,MAAM,KAAK,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,GAAG,GAAG,EAAC;AACvD,QAAQ,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AAC3C,QAAQ,MAAM,CAAC,GAAG,EAAC;AACnB,QAAQ,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC1C,QAAQ,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACxC,QAAQ,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AAClC,KAAK;AACL,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;AACnB,QAAQ,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AACrC,YAAY,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;AAC9D,SAAS,EAAC;AACV,KAAK;AACL;AACA,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACnF,CAAC;AACD;AACY,MAAC,KAAK,GAAG,KAAK;;AC3C1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE;AACvF,IAAI,MAAM,CAAC,GAAG,IAAIA,kBAAU,CAAC,IAAI,CAAC,CAAC;AACnC,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE;AACA,IAAI,IAAI,OAAO,IAAI,IAAI,EAAE;AACzB,QAAQ,OAAO,GAAG,EAAC;AACnB,KAAK;AACL;AACA,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;AACnC,QAAQ,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM;AACtD,YAAY,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AACpE,SAAS,EAAC;AACV,KAAK;AACL;AACA,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;AACjC,QAAQ,MAAM,8EAA8E,CAAC;AAC7F,KAAK;AACL;AACA,IAAI,IAAI,CAAC,UAAU,EAAE;AACrB,QAAQ,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAChE,KAAK,MAAM;AACX,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;AACzC,YAAY,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,MAAM,UAAU,CAAC,CAAC,CAAC;AAC7E,SAAS;AACT,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,EAAE;AAC9E,YAAY,MAAM,qIAAqI,CAAC;AACxJ,SAAS;AACT,KAAK;AACL;AACA,IAAI,MAAM,yBAAyB,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AACrE,IAAI,MAAM,QAAQ,GAAG,CAAC,GAAG,yBAAyB,GAAG,OAAO,CAAC,MAAM,CAAC;AACpE,IAAI,MAAM,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,MAAM,yBAAyB,CAAC,CAAC;AACrF,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,SAAQ;AACrB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AAC7C,QAAQ,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AACxB,QAAQ,IAAI,OAAO,GAAG,EAAE,CAAC;AACzB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AACpC,YAAY,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC;AAC1E,SAAS;AACT,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AACpC,YAAY,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/C,YAAY,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,SAAS;AACT,KAAK;AACL;AACA,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACnF,CAAC;AACD;AACY,MAAC,KAAK,GAAG,KAAK,GAAG;AAC7B;AACA;AACA,SAAS,YAAY,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE;AAC5C,IAAI,IAAI,CAAC,CAAC;AACV,IAAI,IAAI,CAAC,CAAC;AACV,IAAI,OAAO,WAAW;AACtB,QAAQ,IAAI,CAAC,CAAC;AACd,QAAQ,IAAI,CAAC,IAAI,IAAI,EAAE;AACvB,YAAY,CAAC,GAAG,CAAC,CAAC;AAClB,YAAY,CAAC,GAAG,IAAI,CAAC;AACrB,SAAS,MAAM;AACf,YAAY,GAAG;AACf,gBAAgB,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;AACrC,gBAAgB,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;AACrC,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAClC,aAAa,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AAClC,SAAS;AACT,QAAQ,OAAO,EAAE,GAAG,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAChE,KAAK;AACL;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,QAAQ,CAAC,CAAC,mBAAmB,GAAG,KAAK,CAAC,GAAG,EAAE,EAAE;AACrE,IAAI,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC,GAAG,YAAY,CAAC;AAChF,IAAI,IAAI,mBAAmB,IAAI,KAAK,IAAI,mBAAmB,IAAI,QAAQ,EAAE;AACzE,QAAQ,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;AAChC,QAAQ,IAAI,aAAa,GAAG,EAAE,CAAC;AAC/B,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC;AAC1B;AACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AACpC,YAAY,MAAM,GAAG,IAAI,CAAC;AAC1B,YAAY,IAAI,mBAAmB,IAAI,KAAK,EAAE;AAC9C,gBAAgB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;AACrE,oBAAoB,MAAM,GAAG,MAAM,IAAI,KAAK,CAAC;AAC7C,iBAAiB;AACjB,aAAa;AACb,YAAY,IAAI,mBAAmB,IAAI,KAAK,IAAI,mBAAmB,IAAI,QAAQ,EAAE;AACjF,gBAAgB,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;AAC/C,oBAAoB,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC5D,iBAAiB;AACjB,aAAa;AACb,YAAY,IAAI,MAAM,IAAI,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACtD,SAAS;AACT;AACA,QAAQ,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AAC/C,QAAQ,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AAC/C,QAAQ,GAAG,GAAG,MAAM,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;AACzC,QAAQ,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AAC3C,QAAQ,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AAC/C,KAAK;AACL;AACA;AACA,IAAI,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,aAAa,CAAC,MAAe,CAAC,CAAC,CAAC;AACpG,CAAC;AACD;AACA,SAAS,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE;AACjC,IAAI,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC;AACD;AACY,MAAC,QAAQ,GAAG,QAAQ;;AC7ChC,MAAM,eAAe,GAAG,qCAAqC,CAAC;AAC9D,MAAM,eAAe,GAAG,yCAAyC,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,eAAe,YAAY,CAAC,EAAE,EAAE,OAAO,EAAE;AACxD,IAAI,IAAI,KAAK,GAAG,MAAM,SAAS,EAAE,CAAC;AAClC;AACA,IAAI,IAAI,GAAG,GAAG,SAAS,CAAC,CAAC,EAAE,eAAe,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACxD,IAAI,IAAI,OAAO,EAAE;AACjB,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;AACrC,KAAK;AACL;AACA,IAAI,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3C;AACA,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE;AAC3B,QAAQ,MAAM,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC3E,KAAK;AACL,IAAI,MAAM,WAAW,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;AACnD;AACA;AACA,IAAI,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,eAAe,GAAG,WAAW,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;AAClG,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE;AAC3B,QAAQ,MAAM,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC3E,KAAK;AACL,IAAI,MAAM,QAAQ,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;AAChD;AACA;AACA,IAAI,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;AACzC;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,oBAAc,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,IAAI,GAAG,IAAI,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE;AAC7G,IAAI,MAAM,CAAC,GAAG,IAAIA,kBAAU,CAAC,IAAI,CAAC,CAAC;AACnC,IAAI,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,MAAM,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACvE,IAAI,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,uBAAuB,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;AAChG;AACA,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAC5C,IAAI,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,EAAC;AACtE,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;AAClD;AACA,IAAI,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AAChD,IAAI,MAAM,gBAAgB,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;AAC9F,IAAI,MAAM,gBAAgB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAClG,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,KAAK,MAAM,CAAC,IAAI,gBAAgB,EAAE;AACtC,QAAQ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,QAAQ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,KAAK;AACL,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACxG,IAAI,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,EAAE,WAAW,EAAE,CAAC;AAClG;;AC7BA,MAAM,kBAAkB,GAAG;AAC3B,IAAI,CAAC,EAAE,aAAa;AACpB,IAAI,CAAC,EAAE,SAAS;AAChB,IAAI,CAAC,EAAE,UAAU;AACjB,IAAI,CAAC,EAAE,OAAO;AACd,IAAI,CAAC,EAAE,MAAM;AACb,IAAI,CAAC,EAAE,QAAQ;AACf,IAAI,CAAC,EAAE,OAAO;AACd,IAAI,CAAC,EAAE,SAAS;AAChB,IAAI,CAAC,EAAE,KAAK;AACZ,IAAI,CAAC,EAAE,YAAY;AACnB,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,qBAAc,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,IAAI,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE;AAC5G,IAAI,MAAM,CAAC,GAAG,IAAIA,kBAAU,CAAC,IAAI,CAAC,CAAC;AACnC,IAAI,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,MAAM,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACzE,IAAI,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,uBAAuB,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;AAChG;AACA,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;AAC3C,IAAI,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,EAAC;AACrE,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AACjD;AACA,IAAI,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AAChD,IAAI,MAAM,gBAAgB,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;AAC7F,IAAI,MAAM,gBAAgB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAClG,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,MAAM,MAAM,GAAG,GAAE;AACrB,IAAI,KAAK,MAAM,CAAC,IAAI,gBAAgB,EAAE;AACtC,QAAQ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,QAAQ,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,KAAK;AACL,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACxG,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;AAChG;;AC1CA,MAAM,kBAAkB,GAAG;AAC3B,IAAI,CAAC,EAAE,GAAG;AACV,IAAI,CAAC,EAAE,GAAG;AACV,IAAI,CAAC,EAAE,GAAG;AACV,IAAI,CAAC,EAAE,GAAG;AACV,IAAI,CAAC,EAAE,GAAG;AACV,IAAI,CAAC,EAAE,GAAG;AACV,IAAI,CAAC,EAAE,GAAG;AACV,IAAI,CAAC,EAAE,GAAG;AACV,IAAI,CAAC,EAAE,GAAG;AACV,IAAI,CAAC,EAAE,GAAG;AACV,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,qBAAc,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,IAAI,GAAG,IAAI,EAAE,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE;AAC9G,IAAI,MAAM,CAAC,GAAG,IAAIA,kBAAU,CAAC,IAAI,CAAC,CAAC;AACnC,IAAI,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,MAAM,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACzE,IAAI,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,uBAAuB,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;AAChG;AACA,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7C,IAAI,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,EAAC;AACvE,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AACnD;AACA,IAAI,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AAChD,IAAI,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;AAC/F,IAAI,MAAM,gBAAgB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAClG,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,MAAM,MAAM,GAAG,GAAE;AACrB,IAAI,KAAK,MAAM,CAAC,IAAI,gBAAgB,EAAE;AACtC,QAAQ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,QAAQ,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,KAAK;AACL,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACxG,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;AAChG;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}