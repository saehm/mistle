{"version":3,"file":"dataset.es.js","sources":["../src/utils.js","../src/waves.js","../src/swissroll.js","../src/sshape.js","../src/rays.js","../src/moons.js","../src/mnist.js","../src/fmnist.js"],"sourcesContent":["import \"cross-fetch/polyfill\";\nimport pako from \"pako\";\n\nexport const TAU = Math.PI * 2;\n\nexport function scaleLinear([min, max], [from, to]) {\n    const domain_span = max - min;\n    const range_span = to - from;\n    return (value) => (value - min) / domain_span * range_span + from;\n}\n\nexport function extent(array, acc = d => d) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (const entry of array) {\n        min = Math.min(acc(entry), min);\n        max = Math.max(acc(entry), max);\n    }\n    return [min, max];\n}\n\nexport function deviation(array, acc = d => d) {\n    const N = array.length;\n    let mean = 0;\n    for (const entry of array) {\n        mean += acc(entry);\n    }\n    mean /= N;\n    let dev = 0;\n    for (const entry of array) {\n        dev += (acc(entry) - mean);\n    }\n    return dev / N;\n}\n\nexport function getStatistics({values, columns}) {\n    let result = {};\n    columns.forEach((dimension, i) => {\n        result[dimension] = {};\n        const std = deviation(values, row => row[i]);\n        result[dimension].std = std;\n        const [min, max] = extent(values, row => row[i]);\n        result[dimension].min = min;\n        result[dimension].max = max;\n    })\n    return result;\n}\n\n\nexport async function fetch_data(URL) {\n    const response = await fetch(URL, { cache: \"force-cache\", mode: \"cors\" })\n    let data = await response.arrayBuffer();\n    /* const data = await axios.get(URL, {\n        responseType: \"arraybuffer\",        \n    }) */\n    data = pako.inflate(data)\n    return data;\n}","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics } from \"./utils.js\";\n\n/**\n * Creates a uniform grid in 2d and adds a third dimensions by sin(x * {@link freq_x}) * cos(y * {@link freq_y}) * {@link amplitude}.\n * @param {Object} parameters \n * @param {Number} [parameters.N = 400] - Number of points.\n * @param {Float} [parameters.freq_x = 1] - Multiplicator for sin in the x-direction.\n * @param {Float} [parameters.freq_y = 1] - Multiplicator for cos in the y-direction.\n * @param {Float} [parameters.amplitude = 2] - Amplitutde for z-direction.\n * @param {Float} [parameters.noise = 0] - Add uniform noise to each point at each direction.\n * @param {Number} [parameters.seed = 4711] - Seed for the random number generator.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final waves dataset.\n */\nexport default function waves({N = 400, freq_x = 1, freq_y = 1, amplitude = 2, noise = 0, seed = 4711} = {}) {\n    const R = new Randomizer(seed);\n    const a = Math.ceil(Math.sqrt(N));\n    let values = [];\n    const labels = [];\n    const columns = [\"axis_1\", \"axis_2\", \"axis_3\"];\n    for (let i = 0; i < N; ++i) {\n        let y = i % a / a - .5;\n        let x = Math.floor(i / a) / a - .5;\n        let z = Math.sin(x * freq_x) * Math.cos(y * freq_y) * amplitude\n        values.push([x, y, z]);\n        labels.push(Math.floor(i / N * 8));\n    }\n    if (noise > 0) {\n        values = values.map((row) => {\n            return row.map(value => value + R.random * noise);\n        })\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, labels, columns})};\n}\n\nexport const WAVES = waves();","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics, TAU } from \"./utils.js\";\n\n/**\n * Creates a swissroll.\n * @param {Object} parameters \n * @param {Number} parameters.N - Number of points.\n * @param {Float} parameters.alpha_start - Angle from which the swissroll starts.\n * @param {Float} parameters.alpha_end - Angle at which the swissroll ends.\n * @param {Float} parameters.noise - Add uniform noise to each point at each direction.\n * @param {Float} parameters.width - Width of the swissroll.\n * @param {Number} parameters.seed - Seed for the random number generator.\n * @param {Number} parameters.num_labels - Number of labels for the swissroll, partitions the swissroll in num_labels parts according to the angle.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final swissroll dataset.\n */\nexport default function swissroll({N = 400, alpha_start = 1, alpha_end = 2.5, noise = 0, width = 20, seed = 4711, num_labels = 8} = {}) {\n    const R = new Randomizer(seed);\n    let values = new Array(N);\n    const labels = new Array(N);\n    const columns = [\"X\", \"Y\", \"Z\"];\n    for (let i = 0; i < N; ++i) {\n        const alpha = (alpha_start + (i / N * (alpha_end - alpha_start))) * TAU;\n        const x = alpha * Math.cos(alpha);\n        const y = alpha * Math.sin(alpha);\n        const z = width * R.random - width / 2;\n        values[i] = [x, y, z];\n        labels[i] = Math.floor(i / Math.floor(N / num_labels));\n    }\n    if (noise > 0) {\n        values = values.map((row) => {\n            return row.map(value => value + R.random * noise);\n        })\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, labels, columns})};\n}\n\nexport const SWISSROLL = swissroll();","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics } from \"./utils.js\";\n\n/**\n * Creates a s-shape.\n * @param {Object} parameters \n * @param {Number} parameters.N - Number of points.\n * @param {Float} parameters.noise - Add uniform noise to each point at each direction.\n * @param {Float} parameters.width - Width of the s-shape.\n * @param {Number} parameters.seed - Seed for the random number generator.\n * @param {Number} parameters.num_labels - Number of labels for the s-shape, partitions the s-shape in num_labels parts according to the angle.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final s-shape dataset.\n */\nexport default function sshape({N = 400, noise = 0, width = 20, seed = 4711, num_labels = 8} = {}) {\n    const R = new Randomizer(seed);\n    let values = new Array(N);\n    const labels = new Array(N);\n    const columns = [\"X\", \"Y\", \"Z\"];\n    for (let i = 0; i < N; ++i) {\n        const alpha = 3 * Math.PI * (i / N - .5)\n        const x = -Math.sin(alpha);\n        const y = Math.sign(alpha) * (Math.cos(alpha) - 1);\n        const z = width * R.random - width / 2;\n        values[i] = [x, y, z];\n        labels[i] = Math.floor(i / (N / num_labels));\n    }\n    if (noise > 0) {\n        values = values.map((row) => {\n            return row.map(value => value + R.random * noise);\n        })\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, labels, columns})};\n}\n\nexport const SSHAPE = sshape();","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics } from \"./utils.js\";\n\n/**\n * Creates a rays dataset consisting of {@link parameters.D} rays.\n * @param {Object} parameters \n * @param {Number} [parameters.N = 400] - Roughly the number of points, uses round(N / D) * D.\n * @param {Number} [parameters.D = 7] - Number of rays, and number of the results dimensionality. Creates a ray per direction.\n * @param {Float} [parameters.noise = 0] - Add uniform noise to each point at each direction.\n * @param {Boolean} [parameters.touching = false] - Defines if the rays touches each other at the origin.\n * @param {Float} [paramter.length = 12] - Length of each ray.\n * @param {Number} [parameters.seed = 4711] - Seed for the random number generator.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final rays dataset.\n */\nexport default function rays({N = 400, D = 7, noise = 0, touching = true, length = 12, seed = 4711} = {}) {\n    const R = new Randomizer(seed);\n    const n = Math.round(N / D) * D;\n    let values = [];\n    const labels = [];\n    const columns = Array.from({length: D}, (_, i) => `axis_${i + 1}`);\n    for (let i = 0; i < n; ++i) {\n        let row = Array.from({length: D}, (_, j) => (i % D != j) ? 0 : ((i / N) * length - length / 2));\n        if (!touching) {\n            row = row.map((v, j) => v + (j - i % D))\n        }\n        values.push(row);\n        labels.push(`ray_${i % D + 1}`);\n    }\n    if (noise > 0) {\n        values = values.map((row) => {\n            return row.map(value => value + R.random * noise);\n        })\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, labels, columns})};\n}\n\nexport const RAYS = rays();","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { TAU, scaleLinear, getStatistics } from \"./utils.js\";\n\n/**\n * Creates a 'moons' dataset consisting of two intersecting circles.\n * @param {Object} parameters \n * @param {Number} parameters.N - Number of points.\n * @param {Float} parameters.noise - Add uniform noise to each point at each direction.\n * @param {Float} parameters.open - How open the circles should be. Takes a value in [0 and 1), where 0 creates two full circles, 0.5 create two half circles.\n * @param {Number} parameters.seed - Seed for the random number generator.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final moons dataset.\n */\nexport default function moons({N = 400, noise = 0, open=0.5, seed = 4711} = {}) {\n    const R = new Randomizer(seed);\n    const N_alpha = Math.floor(N / 2);\n    const N_beta = N - N_alpha;\n\n    const scale = scaleLinear([0, 1], [open / 2, 1 - open / 2])\n    let values = new Array(N);\n    const labels = new Array(N);\n    const columns = [\"moon_X\", \"moon_Y\", \"moon_Z\"];\n    for (let i = 0; i < N_alpha; ++i) {\n        const alpha = TAU * scale(i / N_alpha) - TAU / 4\n        const x = Math.sin(alpha) - 0.5;\n        const y = Math.cos(alpha);\n        const z = 0\n        values[i] = [x, y, z];\n        labels[i] = \"α\";\n    }\n    for (let i = 0; i < N_beta; ++i) {\n        const alpha = TAU * scale(i / N_beta) - TAU / 4\n        const x = 1 - Math.sin(alpha) - .5;\n        const y = 0\n        const z = 1 - Math.cos(alpha) - 1; \n        values[i + N_alpha] = [x, y, z];\n        labels[i + N_alpha] = \"β\";\n    }\n    if (noise > 0) {\n        values = values.map((row) => {\n            return row.map(value => value + R.random * noise);\n        })\n    }\n    \n    return {values, labels, columns, statistics: getStatistics({values, labels, columns})};\n}\n\nexport const MOONS = moons();","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics, fetch_data } from \"./utils.js\";\n\nconst MNIST_TRAIN_VALUES_URL = \"https://storage.googleapis.com/cvdf-datasets/mnist/train-images-idx3-ubyte.gz\" // \"http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\"\nconst MNIST_TRAIN_LABELS_URL = \"https://storage.googleapis.com/cvdf-datasets/mnist/train-labels-idx1-ubyte.gz\" // \"http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\"\nconst MNIST_TEST_VALUES_URL = \"https://storage.googleapis.com/cvdf-datasets/mnist/t10k-images-idx3-ubyte.gz\";\nconst MNIST_TEST_LABELS_URL = \"https://storage.googleapis.com/cvdf-datasets/mnist/t10k-labels-idx1-ubyte.gz\";\n\n/**\n * Downloads and samples the MNIST dataset.\n * @param {Object} parameters\n * @param {Number} [N = 400] - Number of points.\n * @param {Number} [seed = 4711] - Seed for the random number generator.\n * @param {Array<Number>} [digits = [0,1,2,3,4,5,6,7,8,9]] - Filter for which digits end up in the final dataset.\n * @param {Boolean} [big = false] - If big is false, then it downloads the test dataset, if big is true, then it downloads the training dataset.\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final MNIST dataset sample.\n */\nexport default async function({N = 400, seed = 4711, digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], big = false} = {}) {\n    const R = new Randomizer(seed);\n    const raw_values = await fetch_data(big ? MNIST_TRAIN_VALUES_URL : MNIST_TEST_VALUES_URL);\n    const raw_labels = await fetch_data(big ? MNIST_TRAIN_LABELS_URL : MNIST_TEST_LABELS_URL);\n\n\n    let all_labels = []\n    for (let i = 0; i < (big ? 60000 : 10000); ++i) {\n        all_labels[i] = raw_labels[8 + i];\n    }\n\n    const n = Math.floor(N / digits.length);\n    const number_digits = Array.from({length: digits.length}, () => n)\n    number_digits[0] += (N - (n * digits.length));\n    \n    const indices = Array.from({length: (big ? 60000 : 10000)}, (_, i) => i);\n    const filtered_indices = digits.map(digit => indices.filter(i => all_labels[i] == digit));\n    const selected_indices = number_digits.map((n, i) => R.choice(filtered_indices[i], n)).flat();\n    const values = [];\n    const labels = []\n    for (const i of selected_indices) {\n        const data_row = new Array(28 * 28);\n        for (let j = 0; j < 28 * 28; ++j) {\n            data_row[j] = (raw_values[16 + i * (28 * 28) + j]) / 255;\n        }\n        values.push(data_row);\n        labels.push(raw_labels[8 + i]);\n    }\n    const columns = Array.from({length: 28 * 28}, (_, i) => `pixel_at_${i % 28}_${Math.floor(i / 28)}`);\n    return {values, labels, columns, statistics: getStatistics({values, labels, columns})};\n}\n","import { Randomizer } from \"@saehrimnir/druidjs\";\nimport { getStatistics, fetch_data } from \"./utils.js\";\n\nconst FMNIST_TRAIN_VALUES_URL = \"https://github.com/zalandoresearch/fashion-mnist/blob/3a25339d53c5d2a6a713c6467f17b37332aae507/data/fashion/train-images-idx3-ubyte.gz?raw=true\";\nconst FMNIST_TRAIN_LABELS_URL = \"https://github.com/zalandoresearch/fashion-mnist/blob/3a25339d53c5d2a6a713c6467f17b37332aae507/data/fashion/train-labels-idx1-ubyte.gz?raw=true\";\nconst FMNIST_TEST_VALUES_URL = \"https://github.com/zalandoresearch/fashion-mnist/blob/3a25339d53c5d2a6a713c6467f17b37332aae507/data/fashion/t10k-images-idx3-ubyte.gz?raw=true\";\nconst FMNIST_TEST_LABELS_URL = \"https://github.com/zalandoresearch/fashion-mnist/blob/3a25339d53c5d2a6a713c6467f17b37332aae507/data/fashion/t10k-labels-idx1-ubyte.gz?raw=true\";\nconst FMNIST_LABELS_DICT = {\n    0: \"T-shirt/top\",\n    1: \"Trouser\",\n    2: \"Pullover\",\n    3: \"Dress\",\n    4: \"Coat\",\n    5: \"Sandal\",\n    6: \"Shirt\",\n    7: \"Sneaker\",\n    8: \"Bag\",\n    9: \"Ankle boot\"\n}\n\n/**\n * Downloads and samples the FMNIST dataset.\n * @param {Object} parameters\n * @param {Number} [N = 400] - Number of points.\n * @param {Number} [seed = 4711] - Seed for the random number generator.\n * @param {Array<Number>} [items = [0,1,2,3,4,5,6,7,8,9]] - Filter for which items end up in the final dataset.\n * @param {Boolean} [big = false] - If big is false, then it downloads the test dataset (4.22MB + 5.03KB), if big is true, then it downloads the training dataset (25.2MB + 28.8KB).\n * @returns {{values: Array<Array>, labels: Array<String>, columns: Array<String>, statistics: Object}} - The final FMNIST dataset sample.\n */\nexport default async function({N = 400, seed = 4711, items = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], big = false} = {}) {\n    const R = new Randomizer(seed);\n    const raw_values = await fetch_data(big ? FMNIST_TRAIN_VALUES_URL : FMNIST_TEST_VALUES_URL);\n    const raw_labels = await fetch_data(big ? FMNIST_TRAIN_LABELS_URL : FMNIST_TEST_LABELS_URL);\n\n    let all_labels = []\n    for (let i = 0; i < (big ? 60000 : 10000); ++i) {\n        all_labels[i] = raw_labels[8 + i];\n    }\n\n    const n = Math.floor(N / items.length);\n    const number_digits = Array.from({length: items.length}, () => n)\n    number_digits[0] += (N - (n * items.length));\n    \n    const indices = Array.from({length: (big ? 60000 : 10000)}, (_, i) => i);\n    const filtered_indices = items.map(digit => indices.filter(i => all_labels[i] == digit));\n    const selected_indices = number_digits.map((n, i) => R.choice(filtered_indices[i], n)).flat();\n    const values = [];\n    const labels = []\n    for (const i of selected_indices) {\n        const data_row = new Array(28 * 28);\n        for (let j = 0; j < 28 * 28; ++j) {\n            data_row[j] = (raw_values[16 + i * (28 * 28) + j]) / 255;\n        }\n        values.push(data_row);\n        labels.push(FMNIST_LABELS_DICT[raw_labels[8 + i]]);\n    }\n    const columns = Array.from({length: 28 * 28}, (_, i) => `pixel_at_${i % 28}_${Math.floor(i / 28)}`);\n    return {values, labels, columns, statistics: getStatistics({values, labels, columns})};\n}\n"],"names":[],"mappings":"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"}